{% extends 'base.html.twig' %}

{% block title %}{{action|capitalize}} Item{% endblock %}

{% block body %}
<div class="container mt-3 mb-5" style="position: relative">
  <h2 class="mb-4">{{action|capitalize}} Item</h2>

  {{ form_start(form) }}
      {{ form_errors(form) }}
      {{ form_row(form.name) }}
      <label class="mt-2 mb-3"><strong>Tags</strong></label>
      <div class="tags"
        data-index="{{ form.tags|length > 0 ? form.tags|last.vars.name + 1 : 0 }}"
        data-prototype="{{ form_widget(form.tags.vars.prototype)|e('html_attr') }}">
        {% for tag in form.tags %}
        <div class="item">
            {{form_row(tag)}}
        </div>
        {% endfor %}
      </div>

      <button type="button" class="add_item_link btn btn-success d-block mb-4" data-collection-holder-class="tags">Add a tag</button>

      {# {{form_row(form.tags)}} #}

      {{ form_row(form.itemCollection) }}
      {{ form_rest(form) }}


  <button class="btn btn-primary mt-4 very-bottom" type="submit" formnovalidate>{{action|capitalize}}</button>
  {{ form_end(form) }}

</div>
<script>

document.addEventListener("DOMContentLoaded", () => {
  // tags
  document.querySelectorAll('.add_item_link').forEach(btn => {
        btn.addEventListener("click", addFormToCollection)
    });

    document
    .querySelectorAll('.tags .item')
    .forEach((tag) => {
        addTagFormDeleteLink(tag)
    })

    function addFormToCollection(e) {
      const collectionHolder = document.querySelector('.tags');

      const item = document.createElement('div');

      item.innerHTML = collectionHolder
        .dataset
        .prototype
        .replace(
          /__name__/g,
          collectionHolder.dataset.index
        );

      collectionHolder.appendChild(item);
      collectionHolder.dataset.index++;

      addTagFormDeleteLink(item);
    };


    function addTagFormDeleteLink(item) {
        const removeFormButton = document.createElement('button');
        removeFormButton.className = "btn btn-danger mb-3"
        removeFormButton.innerText = 'Delete a tag';

        item.append(removeFormButton);

        removeFormButton.addEventListener('click', (e) => {
            e.preventDefault();
            // remove the li for the tag form
            item.remove();
        });
    }


  // -----------------
  // Custom attributes
  let item_collection = document.querySelector("#item_update_itemCollection");

  const updateForm = async (data, url, method) => {
    const req = await fetch(url, {
      method: method,
      body: data,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        charset: "utf-8",
      },
    });

    const text = await req.json();

    return text;
  };

  const parseTextToHtml = (text) => {
    const parser = new DOMParser();
    const html = parser.parseFromString(text, "text/html");

    return html;
  };

  item_collection.addEventListener("change", async (e) => {
    let form = item_collection.closest("form");
    let requestBody = "collectionId" + "=" + e.target.value;
    let action = form.getAttribute("action");
    let method = form.getAttribute("method");

    let customAttributes = await updateForm(
      requestBody,
      "/collection/get",
      method
    );
    console.log(customAttributes);


    let nameField = form.querySelector("#item_name");

    let oldCustomAttributes = form.querySelectorAll(".dynamic-field");
    for (let attribute of oldCustomAttributes) {
      attribute.closest("div").remove();
    }

    for (let attribute of customAttributes) {
      let newInputWrapper = document.createElement("div");
      newInputWrapper.classList.add("mb-3");

      let newLabel = document.createElement("label");
      newLabel.classList.add("form-label");
      let name = attribute["name"].split('_').join(' ').toLowerCase();
      name = name.charAt(0).toUpperCase() + name.slice(1);
      newLabel.innerText = name;
      newInputWrapper.appendChild(newLabel);

      let newInput = document.createElement("input");
      newInput.id = "item_update_" + attribute["name"].toLowerCase();
      newInput.name = "item_update[" + attribute["name"].toLowerCase() + "]";
      newInput.classList.add("dynamic-field", "form-control");
      newInputWrapper.appendChild(newInput);
      form.appendChild(newInputWrapper);
      console.log(newInput);
    }

  });
});

</script>
{% endblock %}